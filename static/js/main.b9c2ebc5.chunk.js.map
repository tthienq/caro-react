{"version":3,"sources":["components/Square.js","components/Board.js","components/Game.js","index.js"],"names":["Square","winnerClass","value","onClick","className","createBoard","row","col","winnerSquares","squares","board","cellCounter","i","rows","j","push","renderSquare","Board","calculateWinner","lines","LinestoWinFiveChain","length","a","b","c","d","e","winner","winnerLine","getLocation","move","_col","Game","status","useState","sizeBoard","setSizeBoard","Array","fill","historyState","setHistoryState","currentStepNumber","setCurrentStepNumber","xIsNext","setXIsNext","history","current","draw","checkDraw","moves","map","step","style","location","desc","stepNumber","jumpTo","type","min","max","onChange","size","parseInt","rowHandleChange","target","colHandleChange","reverse","slice","concat","handleClick","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.b9c2ebc5.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nfunction Square({winnerClass, value, onClick}){\r\n    return (\r\n      <button className= {winnerClass} onClick={onClick} >\r\n        {value}\r\n      </button>\r\n    );\r\n}\r\n\r\nexport default Square\r\n","import React from 'react';\r\nimport Square from './Square';\r\n\r\nfunction Board({row, col, winnerSquares, squares, onClick }) {\r\n    return (\r\n      <div>\r\n        {createBoard(row, col, winnerSquares, squares, onClick)}\r\n      </div>\r\n    );\r\n\r\n}\r\n\r\nfunction createBoard(row, col, winnerSquares, squares, onClick) {\r\n\r\n  const board = [];\r\n  //const sizeBoard = Math.sqrt(squares.length);\r\n  let cellCounter = 0;\r\n  for (let i = 0; i < row; i += 1) {\r\n    const rows = [];\r\n    for (let j = 0; j < col; j += 1) {\r\n      rows.push(renderSquare(winnerSquares, squares, cellCounter++, onClick));\r\n    }\r\n    board.push(<div key={i} className=\"board-row\">{rows}</div>);\r\n  }\r\n\r\n  return board;\r\n};\r\n\r\nfunction renderSquare(winnerSquares, squares, i, onClick) {\r\n      \r\n  const winnerClass =\r\n  winnerSquares &&\r\n  ( winnerSquares[0] === i ||\r\n    winnerSquares[1] === i ||\r\n    winnerSquares[2] === i ||\r\n    winnerSquares[3] === i ||\r\n    winnerSquares[4] === i )\r\n    ? 'squarewinner' : 'square';\r\n\r\n  return (\r\n    <Square \r\n      winnerClass={winnerClass}\r\n      key={i}\r\n      value={squares[i]}\r\n      onClick={() => onClick(i)}\r\n    />\r\n  );\r\n}\r\n\r\nexport default Board\r\n","import React, { useState } from \"react\";\r\nimport Board from \"./Board\";\r\n\r\nconst calculateWinner = (squares, row, col) => {\r\n  const lines = LinestoWinFiveChain(row, col);\r\n\r\n  for (let i = 0; i < lines.length; i += 1) {\r\n    const [a, b, c, d, e] = lines[i];\r\n    if (\r\n      squares[a] &&\r\n      squares[a] === squares[b] &&\r\n      squares[a] === squares[c] &&\r\n      squares[a] === squares[d] &&\r\n      squares[a] === squares[e]\r\n    ) {\r\n      return { winner: squares[a], winnerLine: lines[i] };\r\n    }\r\n  }\r\n\r\n  return { winner: null, winnerLine: null };\r\n};\r\n\r\nconst LinestoWinFiveChain = (row, col) => {\r\n  let lines = [];\r\n\r\n  for (let i = 0; i < row - 4; i++) {\r\n    for (let j = 0; j < col; j++) {\r\n      lines.push([\r\n        i * col + j,\r\n        (i + 1) * col + j,\r\n        (i + 2) * col + j,\r\n        (i + 3) * col + j,\r\n        (i + 4) * col + j,\r\n      ]);\r\n    }\r\n  }\r\n  for (let i = 0; i < row; i++) {\r\n    for (let j = 0; j < col - 4; j++) {\r\n      lines.push([\r\n        i * col + j,\r\n        i * col + j + 1,\r\n        i * col + j + 2,\r\n        i * col + j + 3,\r\n        i * col + j + 4,\r\n      ]);\r\n    }\r\n  }\r\n  for (let i = 0; i < row - 4; i++) {\r\n    for (let j = 0; j < col - 4; j++) {\r\n      lines.push([\r\n        i * col + j,\r\n        (i + 1) * col + j + 1,\r\n        (i + 2) * col + j + 2,\r\n        (i + 3) * col + j + 3,\r\n        (i + 4) * col + j + 4,\r\n      ]);\r\n    }\r\n  }\r\n  for (let i = 4; i < row; i++) {\r\n    for (let j = 0; j < col - 4; j++) {\r\n      lines.push([\r\n        i * col + j,\r\n        (i - 1) * col + j + 1,\r\n        (i - 2) * col + j + 2,\r\n        (i - 3) * col + j + 3,\r\n        (i - 4) * col + j + 4,\r\n      ]);\r\n    }\r\n  }\r\n\r\n  return lines;\r\n};\r\n\r\nconst checkDraw = (squares) => {\r\n  for (let i = 0; i < squares.length; i++) {\r\n    if (!squares[i]) return false;\r\n  }\r\n  return true;\r\n};\r\n\r\nconst getLocation = (move, col) => {\r\n\r\n  const _row = (move - (move % col)) / col + 1;\r\n  const _col = (move % col) + 1;\r\n  return `[row: ${_row}, col: ${_col}]`;\r\n};\r\n\r\nfunction Game() {\r\n  const [sizeBoard, setSizeBoard] = useState({ row: 10, col: 10 });\r\n  const [historyState, setHistoryState] = useState([\r\n    {\r\n      squares: Array(sizeBoard.row * sizeBoard.col).fill(null),\r\n    },\r\n  ]);\r\n  const [currentStepNumber, setCurrentStepNumber] = useState(0);\r\n  const [xIsNext, setXIsNext] = useState(true);\r\n\r\n  function handleClick(i) {\r\n    const history = historyState.slice(0, currentStepNumber + 1);\r\n    const current = history[history.length - 1];\r\n    const squares = current.squares.slice();\r\n    if (\r\n      calculateWinner(squares, sizeBoard.row, sizeBoard.col).winner ||\r\n      squares[i]\r\n    ) {\r\n      return;\r\n    }\r\n    squares[i] = xIsNext ? \"X\" : \"O\";\r\n    setHistoryState(\r\n      history.concat([\r\n        {\r\n          squares: squares,\r\n          location: getLocation(i, sizeBoard.col),\r\n          stepNumber: history.length,\r\n        },\r\n      ])\r\n    );\r\n    setCurrentStepNumber(history.length);\r\n    setXIsNext(!xIsNext);\r\n  }\r\n\r\n  function rowHandleChange(e) {\r\n    const size = parseInt(e);\r\n    setSizeBoard({ row: size, col: sizeBoard.col });\r\n    setHistoryState([\r\n      {\r\n        squares: Array(size * sizeBoard.col).fill(null),\r\n      },\r\n    ]);\r\n    setCurrentStepNumber(0);\r\n    setXIsNext(true);\r\n  }\r\n\r\n  function colHandleChange(e) {\r\n    const size = parseInt(e);\r\n    setSizeBoard({ row: sizeBoard.row, col: size });\r\n    setHistoryState([\r\n      {\r\n        squares: Array(sizeBoard.row * size).fill(null),\r\n      },\r\n    ]);\r\n    setCurrentStepNumber(0);\r\n    setXIsNext(true);\r\n  }\r\n\r\n  function sortMoves() {\r\n    setHistoryState(historyState.reverse());\r\n    setCurrentStepNumber(historyState.length - 1 - currentStepNumber);\r\n  }\r\n\r\n  function newGame() {\r\n    setSizeBoard({ row: sizeBoard.row, col: sizeBoard.col });\r\n    setHistoryState([\r\n      {\r\n        squares: Array(sizeBoard.row * sizeBoard.col).fill(null),\r\n      },\r\n    ]);\r\n    setCurrentStepNumber(0);\r\n    setXIsNext(true);\r\n  }\r\n\r\n  function jumpTo(step) {\r\n    setCurrentStepNumber(step);\r\n    setXIsNext(step % 2 === 0);\r\n  }\r\n\r\n  const history = historyState;\r\n  const current = history[currentStepNumber];\r\n  const { winner, winnerLine } = calculateWinner(\r\n    current.squares,\r\n    sizeBoard.row,\r\n    sizeBoard.col\r\n  );\r\n  const draw = checkDraw(current.squares);\r\n\r\n  const moves = history.map((step, move) => {\r\n    const style = currentStepNumber === move ? \"button\" : \"\";\r\n    const location = step.location ? step.location : \"\";\r\n\r\n    const desc = step.stepNumber\r\n      ? \"Go to move #\" + step.stepNumber + location\r\n      : \"Go to game start\";\r\n    return (\r\n      <li key={move}>\r\n        <button className={`${style}`} onClick={() => jumpTo(move)}>\r\n          {desc}\r\n        </button>\r\n      </li>\r\n    );\r\n  });\r\n\r\n  let status;\r\n  if (winner) {\r\n    status = \"Winner: \" + winner;\r\n  } else if (draw) {\r\n    status = \"Draw\";\r\n  } else {\r\n    status = \"Next player: \" + (xIsNext ? \"X\" : \"O\");\r\n  }\r\n\r\n  return (\r\n    <div className=\"game\">     \r\n      <div className=\"game-info\">\r\n        <div className=\"status\">{status}</div>\r\n        <div>\r\n          <button className=\"menu\" onClick={() => newGame()}>\r\n            New Game\r\n          </button>\r\n          <label>Row: </label>\r\n          <input\r\n            type=\"number\"\r\n            value={sizeBoard.row}\r\n            min=\"5\"\r\n            max=\"20\"\r\n            onChange={(e) => rowHandleChange(e.target.value)}\r\n          />\r\n          <label>Column: </label>\r\n          <input\r\n            type=\"number\"\r\n            value={sizeBoard.col}\r\n            min=\"5\"\r\n            max=\"20\"\r\n            onChange={(e) => colHandleChange(e.target.value)}\r\n          />\r\n        </div>\r\n        <button className=\"menu\" onClick={() => sortMoves()}>\r\n          Sort moves\r\n        </button>\r\n        <ol>{moves}</ol>\r\n      </div>\r\n      <div className=\"game-board\">\r\n        <Board\r\n          row={sizeBoard.row}\r\n          col={sizeBoard.col}\r\n          winnerSquares={winnerLine}\r\n          squares={current.squares}\r\n          onClick={(location) => handleClick(location)}\r\n        />\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Game;\r\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport Game from \"./components/Game\"\n\nReactDOM.render(<Game />, document.getElementById(\"root\"));\n"],"sourceRoot":""}